'''
detection_service_client.py

Node used to test outputs of depth_image_filterer.py
'''

import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient

from custom_interfaces.action import DetectionAction
from custom_interfaces.msg import DetectionBuffer
from sensor_msgs.msg import CameraInfo, Image
from geometry_msgs.msg import Point32, Polygon


class DetectionServiceClient(Node):
    _detBuf : DetectionBuffer
    _camInf : CameraInfo
    _iDepth : Image
    _bMessageSent : bool

    def __init__(self):
        super().__init__('DetectionServiceClient')
        self.declare_parameter('service_name','bbox_filter_service')
        self.declare_parameter('detection_buffer_topic','detection_publisher/DetectionBuffer')
        self.declare_parameter('camera_info_topic','camera/camera/aligned_depth_to_color/camera_info')
        self.declare_parameter('depth_image_topic','camera/camera/aligned_depth_to_color/image_raw')

        self.add_subscriptions(self)

        self._action_client = ActionClient(self, DetectionAction,'bbox_filter_action')

        timer_period = 0.5

        self._requestCallback = self.create_timer(timer_period,self.try_send_goal)

    def try_send_goal(self):
        if not self._bMessageSent and (self._detBuf and self._camInf and self._iDepth) :
            self.send_goal()
            self._bMessageSent = True
            self.get_logger().info("Goal has been sent")



    def send_goal(self):
        goal_msg = DetectionAction.Goal()
        goal_msg.camera_info = self._camInf
        goal_msg.depth_image = self._iDepth
        goal_msg.detections = self._detBuf

        self._action_client.wait_for_server()
        return self._action_client.send_goal_async(goal_msg)



    def add_subscriptions(self):
        self.sub_detBuf = self.create_subscription(
            DetectionBuffer,
            self.get_parameter('detection_buffer_topic').get_parameter_value().string_value,
            self.detection_buffer_callback,
            5    
        )
        self.sub_camInf = self.create_subscription(
            CameraInfo,
            self.get_parameter('camera_info_topic').get_parameter_value().string_value,
            self.camera_info_callback,
            5
        )
        self.sub_iDepth = self.create_subscription(
            Image,
            self.get_parameter('depth_image_topic').get_parameter_value().string_value,
            self.depth_image_callback,
            5
        )

        self.sub_detBuf
        self.sub_camInf
        self.sub_iDepth

    def detection_buffer_callback(self, msg):
        self._detBuf = msg
    
    def camera_info_callback(self, msg):
        self._camInf = msg
    
    def depth_image_callback(self, msg):
        self._iDepth = msg
       
def main(args = None):
    rclpy.init()
    action_client = DetectionServiceClient()

    rclpy.spin(action_client)



if __name__ == '__main__':
    main()